"use client"

import { useState, useEffect, useCallback, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Plus, Play, Pause, RotateCcw, Clock, ArrowLeft, Volume2, VolumeX } from "lucide-react"

interface Task {
  id: string
  title: string
  time?: string
  duration?: number
  completed: boolean
  isPomodoro: boolean
  subTasks: SubTask[]
  isExpanded: boolean
  autoGenerated?: boolean
  startTime?: number
  actualDuration?: number
  isActive?: boolean
}

interface SubTask {
  text: string
  duration: number
  isBreak: boolean
  breakType?: string
  completed: boolean
}

interface PomodoroState {
  isActive: boolean
  timeLeft: number
  isBreak: boolean
  currentTaskId: string | null
  currentTaskTitle?: string
}

interface FloatingShape {
  id: number
  x: number
  y: number
  size: number
  opacity: number
  rotation: number
  speed: number
  direction: number
  shape: "circle" | "square" | "triangle"
}

interface Notification {
  id: string
  message: string
  type: "gentle" | "reminder" | "celebration"
  duration: number
}

interface TimePickerProps {
  value: string
  onChange: (value: string) => void
  onClose: () => void
}

type AppState = "welcome" | "home" | "editing" | "focus" | "wakeup"

// Gentle sound effects using Web Audio API
class GentleSounds {
  private audioContext: AudioContext | null = null
  private enabled = true

  constructor() {
    if (typeof window !== "undefined") {
      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()
    }
  }

  toggle() {
    this.enabled = !this.enabled
    return this.enabled
  }

  isEnabled() {
    return this.enabled
  }

  private createTone(frequency: number, duration: number, type: OscillatorType = "sine") {
    if (!this.audioContext || !this.enabled) return

    const oscillator = this.audioContext.createOscillator()
    const gainNode = this.audioContext.createGain()

    oscillator.connect(gainNode)
    gainNode.connect(this.audioContext.destination)

    oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime)
    oscillator.type = type

    gainNode.gain.setValueAtTime(0, this.audioContext.currentTime)
    gainNode.gain.linearRampToValueAtTime(0.1, this.audioContext.currentTime + 0.1)
    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration)

    oscillator.start(this.audioContext.currentTime)
    oscillator.stop(this.audioContext.currentTime + duration)
  }

  notification() {
    this.createTone(523.25, 0.3) // C5
    setTimeout(() => this.createTone(659.25, 0.3), 150) // E5
  }

  celebration() {
    this.createTone(523.25, 0.2) // C5
    setTimeout(() => this.createTone(659.25, 0.2), 100) // E5
    setTimeout(() => this.createTone(783.99, 0.3), 200) // G5
  }

  focusStart() {
    this.createTone(440, 0.5) // A4
  }

  breakTime() {
    this.createTone(349.23, 0.4) // F4
    setTimeout(() => this.createTone(392, 0.4), 200) // G4
  }

  gentle() {
    this.createTone(261.63, 0.6) // C4
  }
}

function TimePicker({ value, onChange, onClose }: TimePickerProps) {
  const [hours, setHours] = useState(value ? value.split(":")[0] : "09")
  const [minutes, setMinutes] = useState(value ? value.split(":")[1] : "00")

  const handleConfirm = () => {
    onChange(`${hours}:${minutes}`)
    onClose()
  }

  return (
    <div className="fixed inset-0 bg-black/20 flex items-center justify-center z-50 animate-in fade-in duration-300">
      <div className="bg-white border border-gray-200 p-8 max-w-sm w-full mx-4 animate-in slide-in-from-bottom-4 duration-300">
        <div className="text-center mb-6">
          <h3 className="text-lg font-medium tracking-wide">SELECT TIME</h3>
        </div>

        <div className="flex items-center justify-center gap-4 mb-8">
          <div className="text-center">
            <div className="text-xs text-gray-500 mb-2 tracking-wide">HOUR</div>
            <select
              value={hours}
              onChange={(e) => setHours(e.target.value)}
              className="text-3xl font-light border-0 border-b border-gray-300 bg-transparent text-center w-16 focus:border-black focus:outline-none transition-colors duration-300"
            >
              {Array.from({ length: 24 }, (_, i) => (
                <option key={i} value={i.toString().padStart(2, "0")}>
                  {i.toString().padStart(2, "0")}
                </option>
              ))}
            </select>
          </div>

          <div className="text-3xl font-light text-gray-400 animate-pulse">:</div>

          <div className="text-center">
            <div className="text-xs text-gray-500 mb-2 tracking-wide">MINUTE</div>
            <select
              value={minutes}
              onChange={(e) => setMinutes(e.target.value)}
              className="text-3xl font-light border-0 border-b border-gray-300 bg-transparent text-center w-16 focus:border-black focus:outline-none transition-colors duration-300"
            >
              {Array.from({ length: 60 }, (_, i) => (
                <option key={i} value={i.toString().padStart(2, "0")}>
                  {i.toString().padStart(2, "0")}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="flex gap-4">
          <Button
            onClick={handleConfirm}
            className="flex-1 bg-black text-white hover:bg-gray-800 rounded-none py-3 font-medium tracking-wide transition-all duration-300 hover:scale-105"
          >
            CONFIRM
          </Button>
          <Button
            variant="outline"
            onClick={onClose}
            className="flex-1 border-black text-black hover:bg-gray-100 rounded-none py-3 font-medium tracking-wide transition-all duration-300"
          >
            CANCEL
          </Button>
        </div>
      </div>
    </div>
  )
}

function NotificationToast({ notification, onDismiss }: { notification: Notification; onDismiss: () => void }) {
  useEffect(() => {
    const timer = setTimeout(onDismiss, notification.duration)
    return () => clearTimeout(timer)
  }, [notification.duration, onDismiss])

  return (
    <div className="fixed top-20 left-1/2 transform -translate-x-1/2 z-50 animate-in slide-in-from-top-4 duration-500">
      <div className="bg-white/95 backdrop-blur-sm border border-gray-200 rounded-lg px-6 py-4 shadow-lg max-w-sm animate-pulse">
        <p className="text-sm text-gray-700 font-light text-center">{notification.message}</p>
      </div>
    </div>
  )
}

function WakeUpScreen({ onContinue, tasks }: { onContinue: () => void; tasks: Task[] }) {
  const [currentTime, setCurrentTime] = useState(new Date())
  const [breathingPhase, setBreathingPhase] = useState<"inhale" | "hold" | "exhale">("inhale")

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000)
    return () => clearInterval(timer)
  }, [])

  useEffect(() => {
    const breathingCycle = setInterval(() => {
      setBreathingPhase((prev) => {
        if (prev === "inhale") return "hold"
        if (prev === "hold") return "exhale"
        return "inhale"
      })
    }, 3000)

    return () => clearInterval(breathingCycle)
  }, [])

  const getGreeting = () => {
    const hour = currentTime.getHours()
    if (hour < 12) return "Good morning"
    if (hour < 17) return "Good afternoon"
    return "Good evening"
  }

  const getMorningIntention = () => {
    if (tasks.length === 0) return "Today is a blank canvas. What would you like to create?"

    const upcomingTasks = tasks.filter((t) => !t.completed)
    if (upcomingTasks.length === 0) return "You've completed everything! Time to rest or explore new possibilities."

    return `You have ${upcomingTasks.length} gentle intention${upcomingTasks.length > 1 ? "s" : ""} waiting for you.`
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white flex flex-col items-center justify-center p-6">
      <div className="text-center max-w-md animate-in fade-in duration-1000">
        {/* Breathing Circle */}
        <div className="mb-12">
          <div
            className={`w-32 h-32 mx-auto rounded-full border-2 border-gray-300 transition-all duration-3000 ease-in-out ${
              breathingPhase === "inhale"
                ? "scale-110 border-blue-300"
                : breathingPhase === "hold"
                  ? "scale-110 border-green-300"
                  : "scale-90 border-purple-300"
            }`}
          >
            <div className="w-full h-full flex items-center justify-center">
              <span className="text-xs text-gray-500 font-light tracking-wide">
                {breathingPhase === "inhale" ? "BREATHE IN" : breathingPhase === "hold" ? "HOLD" : "BREATHE OUT"}
              </span>
            </div>
          </div>
        </div>

        {/* Time Display */}
        <div className="mb-8">
          <div className="text-6xl font-light text-black mb-2 animate-in slide-in-from-bottom-4 duration-1000 delay-300">
            {currentTime.toLocaleTimeString("en-US", { hour12: false, hour: "2-digit", minute: "2-digit" })}
          </div>
          <div className="text-sm text-gray-500 font-light tracking-wide">
            {currentTime.toLocaleDateString("en-US", { weekday: "long", month: "long", day: "numeric" })}
          </div>
        </div>

        {/* Greeting */}
        <div className="mb-8 animate-in slide-in-from-bottom-4 duration-1000 delay-500">
          <h1 className="text-2xl font-light text-black mb-4">{getGreeting()}</h1>
          <p className="text-gray-600 font-light leading-relaxed">{getMorningIntention()}</p>
        </div>

        {/* Gentle Suggestions */}
        <div className="mb-8 space-y-3 animate-in slide-in-from-bottom-4 duration-1000 delay-700">
          <div className="text-xs text-gray-500 tracking-wide mb-4">GENTLE SUGGESTIONS</div>
          <div className="space-y-2 text-sm text-gray-600 font-light">
            <div className="flex items-center gap-3">
              <div className="w-2 h-2 bg-blue-300 rounded-full"></div>
              <span>Take three deep breaths</span>
            </div>
            <div className="flex items-center gap-3">
              <div className="w-2 h-2 bg-green-300 rounded-full"></div>
              <span>Drink a glass of water</span>
            </div>
            <div className="flex items-center gap-3">
              <div className="w-2 h-2 bg-purple-300 rounded-full"></div>
              <span>Set an intention for the day</span>
            </div>
          </div>
        </div>

        {/* Continue Button */}
        <Button
          onClick={onContinue}
          className="bg-black text-white hover:bg-gray-800 rounded-none px-8 py-3 font-light tracking-wide transition-all duration-300 hover:scale-105 animate-in slide-in-from-bottom-4 duration-1000 delay-1000"
        >
          BEGIN THE DAY
        </Button>
      </div>
    </div>
  )
}

function FocusMode({
  pomodoro,
  onPause,
  onReset,
  onComplete,
  shapes,
  sounds,
}: {
  pomodoro: PomodoroState
  onPause: () => void
  onReset: () => void
  onComplete: () => void
  shapes: FloatingShape[]
  sounds: GentleSounds
}) {
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
  }

  useEffect(() => {
    if (pomodoro.timeLeft === 0) {
      if (pomodoro.isBreak) {
        sounds.focusStart()
      } else {
        sounds.breakTime()
      }
      onComplete()
    }
  }, [pomodoro.timeLeft, pomodoro.isBreak, onComplete, sounds])

  const progress = pomodoro.isBreak ? (300 - pomodoro.timeLeft) / 300 : (1200 - pomodoro.timeLeft) / 1200

  return (
    <div className="min-h-screen bg-gray-50 relative overflow-hidden">
      {/* Floating Geometric Shapes */}
      <div className="absolute inset-0 pointer-events-none">
        {shapes.map((shape) => (
          <div
            key={shape.id}
            className="absolute transition-all duration-1000 ease-in-out"
            style={{
              left: `${shape.x}%`,
              top: `${shape.y}%`,
              width: `${shape.size}px`,
              height: `${shape.size}px`,
              opacity: shape.opacity,
              transform: `translate(-50%, -50%) rotate(${shape.rotation}deg)`,
            }}
          >
            {shape.shape === "circle" && (
              <div className="w-full h-full border border-gray-300/30 rounded-full animate-pulse" />
            )}
            {shape.shape === "square" && <div className="w-full h-full border border-gray-300/30 animate-pulse" />}
            {shape.shape === "triangle" && (
              <div
                className="w-0 h-0 border-l-[20px] border-r-[20px] border-b-[35px] border-l-transparent border-r-transparent border-b-gray-300/30 animate-pulse"
                style={{
                  borderLeftWidth: `${shape.size / 2}px`,
                  borderRightWidth: `${shape.size / 2}px`,
                  borderBottomWidth: `${shape.size * 0.87}px`,
                }}
              />
            )}
          </div>
        ))}
      </div>

      {/* Status Bar */}
      <div className="flex justify-between items-center p-4 text-sm font-medium text-black relative z-10">
        <Button
          variant="ghost"
          size="sm"
          onClick={onComplete}
          className="p-2 transition-all duration-300 hover:scale-110"
        >
          <ArrowLeft className="w-4 h-4" />
        </Button>
        <span className="animate-pulse">FOCUS MODE</span>
        <div className="w-8" />
      </div>

      {/* Main Focus Content */}
      <div className="flex flex-col items-center justify-center min-h-[80vh] px-6 relative z-10">
        <div className="text-center max-w-md animate-in fade-in duration-1000">
          <h1 className="text-2xl font-light text-black mb-12 leading-relaxed animate-in slide-in-from-bottom-4 duration-1000 delay-300">
            {pomodoro.currentTaskTitle}
          </h1>

          <div className="mb-12">
            <div className="text-7xl font-mono font-light text-black mb-4 animate-in zoom-in duration-1000 delay-500">
              {formatTime(pomodoro.timeLeft)}
            </div>
            <div className="text-sm tracking-wide text-gray-600 font-light mb-8 animate-in slide-in-from-bottom-4 duration-1000 delay-700">
              {pomodoro.isBreak ? "Time to breathe and reset" : "Deep focus time"}
            </div>

            {/* Animated Progress Circle */}
            <div className="w-32 h-32 mx-auto mb-8 relative animate-in scale-in duration-1000 delay-1000">
              <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  stroke="currentColor"
                  strokeWidth="2"
                  fill="none"
                  className="text-gray-200"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  stroke="currentColor"
                  strokeWidth="2"
                  fill="none"
                  strokeDasharray={`${2 * Math.PI * 45}`}
                  strokeDashoffset={`${2 * Math.PI * 45 * (1 - progress)}`}
                  className="text-black transition-all duration-1000"
                  strokeLinecap="round"
                />
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <div
                  className={`w-4 h-4 rounded-full transition-all duration-1000 ${
                    pomodoro.isActive ? "bg-green-400 animate-pulse" : "bg-gray-400"
                  }`}
                />
              </div>
            </div>

            <div className="flex gap-4 justify-center animate-in slide-in-from-bottom-4 duration-1000 delay-1200">
              {!pomodoro.isActive ? (
                <Button
                  onClick={() => {
                    sounds.focusStart()
                  }}
                  className="bg-black text-white hover:bg-gray-800 rounded-full w-16 h-16 p-0 transition-all duration-300 hover:scale-110"
                >
                  <Play className="w-6 h-6" />
                </Button>
              ) : (
                <Button
                  onClick={onPause}
                  className="bg-black text-white hover:bg-gray-800 rounded-full w-16 h-16 p-0 transition-all duration-300 hover:scale-110"
                >
                  <Pause className="w-6 h-6" />
                </Button>
              )}
              <Button
                variant="outline"
                onClick={onReset}
                className="border-gray-300 text-gray-600 hover:bg-gray-50 rounded-full w-16 h-16 p-0 transition-all duration-300 hover:scale-110"
              >
                <RotateCcw className="w-6 h-6" />
              </Button>
            </div>
          </div>

          <div className="text-xs text-gray-400 font-light animate-in fade-in duration-1000 delay-1500">
            {pomodoro.isBreak
              ? "Let your mind wander. You've earned this pause."
              : "Stay present. Every moment of focus matters."}
          </div>
        </div>
      </div>
    </div>
  )
}

export default function DayPlanner() {
  const [appState, setAppState] = useState<AppState>("wakeup")
  const [tasks, setTasks] = useState<Task[]>([])
  const [newTaskTitle, setNewTaskTitle] = useState("")
  const [newTaskTime, setNewTaskTime] = useState("")
  const [newTaskDuration, setNewTaskDuration] = useState("")
  const [showTimePicker, setShowTimePicker] = useState(false)
  const [currentTime, setCurrentTime] = useState(new Date())
  const [notifications, setNotifications] = useState<Notification[]>([])
  const [shapes, setShapes] = useState<FloatingShape[]>([])
  const [soundsEnabled, setSoundsEnabled] = useState(true)
  const soundsRef = useRef<GentleSounds | null>(null)
  const [pomodoro, setPomodoro] = useState<PomodoroState>({
    isActive: false,
    timeLeft: 20 * 60,
    isBreak: false,
    currentTaskId: null,
    currentTaskTitle: undefined,
  })
  const [editingSubTask, setEditingSubTask] = useState<{ taskId: string; index: number } | null>(null)
  const [editSubTaskValue, setEditSubTaskValue] = useState("")

  // Initialize sounds
  useEffect(() => {
    soundsRef.current = new GentleSounds()
  }, [])

  // Initialize floating shapes for focus mode
  useEffect(() => {
    const initialShapes: FloatingShape[] = Array.from({ length: 8 }, (_, i) => ({
      id: i,
      x: Math.random() * 100,
      y: Math.random() * 100,
      size: Math.random() * 40 + 20,
      opacity: Math.random() * 0.2 + 0.05,
      rotation: Math.random() * 360,
      speed: Math.random() * 0.3 + 0.1,
      direction: Math.random() * Math.PI * 2,
      shape: ["circle", "square", "triangle"][Math.floor(Math.random() * 3)] as "circle" | "square" | "triangle",
    }))
    setShapes(initialShapes)
  }, [])

  // Animate floating shapes
  useEffect(() => {
    if (appState !== "focus") return

    const interval = setInterval(() => {
      setShapes((prevShapes) =>
        prevShapes.map((shape) => ({
          ...shape,
          x: (shape.x + Math.cos(shape.direction) * shape.speed + 100) % 100,
          y: (shape.y + Math.sin(shape.direction) * shape.speed + 100) % 100,
          rotation: (shape.rotation + 0.5) % 360,
          direction: shape.direction + (Math.random() - 0.5) * 0.05,
          opacity: Math.max(0.02, Math.min(0.25, shape.opacity + (Math.random() - 0.5) * 0.01)),
        })),
      )
    }, 150)

    return () => clearInterval(interval)
  }, [appState])

  // Update current time every minute
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date())
    }, 60000)
    return () => clearInterval(timer)
  }, [])

  // Gentle reminders
  useEffect(() => {
    const reminderInterval = setInterval(
      () => {
        const reminders = [
          "Remember to take a deep breath 🌸",
          "How about a sip of water? 💧",
          "Gentle reminder to check your posture ✨",
          "You're doing wonderfully. Keep going 🌟",
          "Time for a gentle stretch? 🌿",
          "Notice how you're feeling right now 🦋",
        ]

        const randomReminder = reminders[Math.floor(Math.random() * reminders.length)]
        addNotification(randomReminder, "reminder", 4000)
      },
      15 * 60 * 1000,
    ) // Every 15 minutes

    return () => clearInterval(reminderInterval)
  }, [])

  // Pomodoro timer effect
  useEffect(() => {
    let interval: NodeJS.Timeout
    if (pomodoro.isActive && pomodoro.timeLeft > 0) {
      interval = setInterval(() => {
        setPomodoro((prev) => ({
          ...prev,
          timeLeft: prev.timeLeft - 1,
        }))
      }, 1000)
    } else if (pomodoro.timeLeft === 0) {
      if (pomodoro.isBreak) {
        addNotification("Break time is over. Ready to focus again? 🌟", "gentle", 5000)
        setPomodoro((prev) => ({
          ...prev,
          isActive: false,
          timeLeft: 20 * 60,
          isBreak: false,
        }))
      } else {
        addNotification("Beautiful work! Time for a gentle break 🌸", "celebration", 5000)
        setPomodoro((prev) => ({
          ...prev,
          isActive: false,
          timeLeft: 5 * 60,
          isBreak: true,
        }))
      }
    }
    return () => clearInterval(interval)
  }, [pomodoro.isActive, pomodoro.timeLeft])

  const addNotification = useCallback((message: string, type: Notification["type"], duration: number) => {
    const id = Date.now().toString()
    setNotifications((prev) => [...prev, { id, message, type, duration }])

    // Play sound based on notification type
    if (soundsRef.current) {
      if (type === "celebration") {
        soundsRef.current.celebration()
      } else if (type === "gentle") {
        soundsRef.current.gentle()
      } else {
        soundsRef.current.notification()
      }
    }
  }, [])

  const removeNotification = useCallback((id: string) => {
    setNotifications((prev) => prev.filter((n) => n.id !== id))
  }, [])

  const toggleSounds = () => {
    if (soundsRef.current) {
      const enabled = soundsRef.current.toggle()
      setSoundsEnabled(enabled)
    }
  }

  const breakTypes = [
    "breathe",
    "stretch",
    "reflect",
    "pause",
    "reset",
    "recharge",
    "unwind",
    "center",
    "refresh",
    "restore",
    "ground",
    "flow",
  ]

  const getRandomBreakType = () => {
    return breakTypes[Math.floor(Math.random() * breakTypes.length)]
  }

  const generateSubTasks = (title: string, duration: number): SubTask[] => {
    const taskLower = title.toLowerCase()
    const subTasks: SubTask[] = []

    const taskPatterns = [
      {
        keywords: ["presentation", "present", "pitch", "demo"],
        steps: [
          "Research and gather information",
          "Create outline and structure",
          "Design slides and materials",
          "Practice and rehearse",
          "Final review and polish",
        ],
      },
      {
        keywords: ["write", "writing", "essay", "article", "blog", "report"],
        steps: [
          "Research and collect sources",
          "Create outline and structure",
          "Write first draft",
          "Review and edit content",
          "Final proofreading and polish",
        ],
      },
      {
        keywords: ["study", "learn", "review", "read"],
        steps: ["Skim through material", "Take detailed notes", "Create summary", "Practice and test knowledge"],
      },
      {
        keywords: ["exercise", "workout", "gym", "run", "fitness"],
        steps: ["Gentle warm-up", "Main exercise routine", "Cool down and stretch"],
      },
      {
        keywords: ["cook", "cooking", "meal", "dinner", "lunch"],
        steps: ["Gather and prep ingredients", "Begin cooking process", "Complete and plate dish"],
      },
      {
        keywords: ["clean", "cleaning", "organize", "tidy"],
        steps: ["Declutter and sort items", "Deep clean surfaces", "Organize and arrange", "Final touches and review"],
      },
      {
        keywords: ["meeting", "call", "discussion"],
        steps: ["Prepare agenda and materials", "Conduct main discussion", "Wrap up and plan follow-ups"],
      },
    ]

    const matchedPattern = taskPatterns.find((pattern) =>
      pattern.keywords.some((keyword) => taskLower.includes(keyword)),
    )

    const steps = matchedPattern?.steps || [
      "Plan your approach",
      "Begin the main work",
      "Continue with focus",
      "Review and finalize",
    ]

    const numBlocks = Math.ceil(duration / 25)

    for (let i = 0; i < Math.min(numBlocks, steps.length); i++) {
      subTasks.push({
        text: steps[i] || `Continue working (block ${i + 1})`,
        duration: 20,
        isBreak: false,
        completed: false,
      })

      if (i < numBlocks - 1) {
        subTasks.push({
          text: `Time to ${getRandomBreakType()}`,
          duration: 5,
          isBreak: true,
          breakType: getRandomBreakType(),
          completed: false,
        })
      }
    }

    return subTasks
  }

  const addTask = () => {
    if (!newTaskTitle.trim()) return

    const duration = newTaskDuration ? Number.parseInt(newTaskDuration) : undefined
    const autoSubTasks = duration ? generateSubTasks(newTaskTitle, duration) : []

    const newTask: Task = {
      id: Date.now().toString(),
      title: newTaskTitle,
      time: newTaskTime || undefined,
      duration: duration,
      completed: false,
      isPomodoro: false,
      subTasks: autoSubTasks,
      isExpanded: false,
      autoGenerated: autoSubTasks.length > 0,
    }

    setTasks((prev) => [...prev, newTask])
    setNewTaskTitle("")
    setNewTaskTime("")
    setNewTaskDuration("")
    setAppState("home")
    addNotification("New intention created beautifully ✨", "celebration", 3000)
  }

  const startTask = (taskId: string) => {
    setTasks((prev) =>
      prev.map((task) =>
        task.id === taskId ? { ...task, isActive: true, startTime: Date.now() } : { ...task, isActive: false },
      ),
    )
    addNotification("You've begun. Trust the process 🌱", "gentle", 3000)
  }

  const completeTask = (taskId: string) => {
    setTasks((prev) =>
      prev.map((task) => {
        if (task.id === taskId) {
          const actualDuration = task.startTime ? Math.round((Date.now() - task.startTime) / 60000) : undefined
          return { ...task, completed: true, isActive: false, actualDuration }
        }
        return task
      }),
    )

    addNotification("Beautifully completed! You should feel proud 🌟", "celebration", 4000)

    setTimeout(() => {
      setTasks((prev) => prev.filter((task) => task.id !== taskId))
    }, 2000)
  }

  const toggleSubTaskComplete = (taskId: string, subIndex: number) => {
    setTasks((prev) =>
      prev.map((task) =>
        task.id === taskId
          ? {
              ...task,
              subTasks: task.subTasks.map((subTask, i) =>
                i === subIndex ? { ...subTask, completed: !subTask.completed } : subTask,
              ),
            }
          : task,
      ),
    )
  }

  const convertToPomodoro = (taskId: string) => {
    setTasks((prev) =>
      prev.map((task) =>
        task.id === taskId
          ? {
              ...task,
              isPomodoro: true,
              isExpanded: true,
            }
          : task,
      ),
    )
  }

  const toggleExpansion = (taskId: string) => {
    setTasks((prev) => prev.map((task) => (task.id === taskId ? { ...task, isExpanded: !task.isExpanded } : task)))
  }

  const startPomodoro = (taskId: string) => {
    setPomodoro({
      isActive: true,
      timeLeft: 20 * 60,
      isBreak: false,
      currentTaskId: taskId,
    })
  }

  const pausePomodoro = () => {
    setPomodoro((prev) => ({ ...prev, isActive: false }))
  }

  const resetPomodoro = () => {
    setPomodoro({
      isActive: false,
      timeLeft: 20 * 60,
      isBreak: false,
      currentTaskId: null,
    })
  }

  const addSubTask = (taskId: string) => {
    setTasks((prev) =>
      prev.map((task) =>
        task.id === taskId
          ? {
              ...task,
              subTasks: [
                ...task.subTasks,
                {
                  text: "New step",
                  duration: 20,
                  isBreak: false,
                  completed: false,
                },
              ],
            }
          : task,
      ),
    )
  }

  const updateSubTask = (taskId: string, index: number, value: string) => {
    setTasks((prev) =>
      prev.map((task) =>
        task.id === taskId
          ? {
              ...task,
              subTasks: task.subTasks.map((subTask, i) => (i === index ? { ...subTask, text: value } : subTask)),
            }
          : task,
      ),
    )
  }

  const removeSubTask = (taskId: string, index: number) => {
    setTasks((prev) =>
      prev.map((task) =>
        task.id === taskId
          ? {
              ...task,
              subTasks: task.subTasks.filter((_, i) => i !== index),
            }
          : task,
      ),
    )
  }

  const startFocusMode = (taskId: string, taskTitle: string) => {
    setPomodoro({
      isActive: true,
      timeLeft: 20 * 60,
      isBreak: false,
      currentTaskId: taskId,
      currentTaskTitle: taskTitle,
    })
    setAppState("focus")
    addNotification("Focus mode activated. You've got this 🎯", "gentle", 3000)
  }

  const exitFocusMode = () => {
    setAppState("home")
    setPomodoro((prev) => ({ ...prev, isActive: false, currentTaskId: null, currentTaskTitle: undefined }))
  }

  const getTaskProgress = (task: Task) => {
    if (task.subTasks.length === 0) return 0
    const completed = task.subTasks.filter((st) => st.completed).length
    return Math.round((completed / task.subTasks.length) * 100)
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
  }

  const totalTasks = tasks.length
  const completedTasks = tasks.filter((t) => t.completed).length

  if (appState === "wakeup") {
    return <WakeUpScreen onContinue={() => setAppState(tasks.length > 0 ? "home" : "welcome")} tasks={tasks} />
  }

  if (appState === "focus") {
    return (
      <FocusMode
        pomodoro={pomodoro}
        onPause={() => setPomodoro((prev) => ({ ...prev, isActive: false }))}
        onReset={() => setPomodoro((prev) => ({ ...prev, timeLeft: 20 * 60, isActive: false }))}
        onComplete={exitFocusMode}
        shapes={shapes}
        sounds={soundsRef.current!}
      />
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Notifications */}
      {notifications.map((notification) => (
        <NotificationToast
          key={notification.id}
          notification={notification}
          onDismiss={() => removeNotification(notification.id)}
        />
      ))}

      {/* Status Bar */}
      <div className="flex justify-between items-center p-4 text-sm font-medium text-black">
        <span className="animate-pulse">
          {currentTime.toLocaleTimeString("en-US", { hour12: false, hour: "2-digit", minute: "2-digit" })}
        </span>
        <div className="flex items-center gap-3">
          <Button
            variant="ghost"
            size="sm"
            onClick={toggleSounds}
            className="p-1 transition-all duration-300 hover:scale-110"
          >
            {soundsEnabled ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
          </Button>
          <div className="flex items-center gap-1">
            <div className="flex gap-1">
              <div className="w-1 h-3 bg-black animate-pulse"></div>
              <div className="w-1 h-3 bg-black animate-pulse delay-100"></div>
              <div className="w-1 h-3 bg-black animate-pulse delay-200"></div>
              <div className="w-1 h-3 bg-gray-400"></div>
            </div>
            <div className="w-6 h-3 border border-black rounded-sm">
              <div className="w-4 h-full bg-black rounded-sm"></div>
            </div>
          </div>
        </div>
      </div>

      <div className="px-6 pb-6">
        {/* Welcome/Home Screen */}
        {(appState === "welcome" || appState === "home") && (
          <>
            {/* Header */}
            <div className="text-center mt-8 mb-12 animate-in fade-in duration-1000">
              <div className="text-6xl font-light text-black mb-4 animate-in slide-in-from-bottom-4 duration-1000 delay-300">
                {currentTime.getHours()}
                <span className="text-3xl align-top">h</span>
              </div>

              <div className="my-8 animate-in scale-in duration-1000 delay-500">
                <div className="w-24 h-24 mx-auto bg-black rounded-full relative overflow-hidden transition-all duration-300 hover:scale-105">
                  <div className="absolute inset-3 bg-gray-50 rounded-full"></div>
                  <div className="absolute top-6 left-6 w-3 h-3 bg-black rounded-full animate-pulse"></div>
                </div>
                <div className="mt-6 space-y-1">
                  {[...Array(6)].map((_, i) => (
                    <div
                      key={i}
                      className="h-px bg-black mx-auto transition-all duration-500 animate-in slide-in-from-left duration-1000"
                      style={{
                        width: `${80 - i * 8}px`,
                        animationDelay: `${700 + i * 100}ms`,
                      }}
                    />
                  ))}
                </div>
              </div>

              <div className="text-right mb-6 animate-in slide-in-from-right duration-1000 delay-1000">
                <div className="text-xs font-medium tracking-[0.3em] text-black">
                  {"TODAY".split("").map((letter, i) => (
                    <span
                      key={i}
                      className="inline-block mr-1 animate-in fade-in duration-300"
                      style={{ animationDelay: `${1200 + i * 50}ms` }}
                    >
                      {letter}
                    </span>
                  ))}
                </div>
              </div>

              {tasks.length === 0 ? (
                <div className="text-center animate-in slide-in-from-bottom-4 duration-1000 delay-1500">
                  <h1 className="text-lg font-light text-black mb-2 tracking-wide">What would you like to focus on?</h1>
                  <p className="text-sm text-gray-500 mb-8 font-light">Take your time. Every step matters.</p>
                  <Button
                    onClick={() => setAppState("editing")}
                    className="bg-black text-white hover:bg-gray-800 rounded-none px-8 py-3 font-light tracking-wide transition-all duration-300 hover:scale-105"
                  >
                    BEGIN GENTLY
                  </Button>
                </div>
              ) : (
                <div className="text-center mb-8 animate-in slide-in-from-bottom-4 duration-1000 delay-1500">
                  <h1 className="text-lg font-light text-black mb-2 tracking-wide">Your gentle intentions</h1>
                  <p className="text-sm text-gray-500 mb-6 font-light">
                    Each step is progress. You're doing beautifully.
                  </p>
                </div>
              )}
            </div>

            {/* Gentle Task List */}
            {tasks.length > 0 && (
              <div className="space-y-4 mb-8">
                {tasks.map((task, index) => (
                  <div
                    key={task.id}
                    className="bg-white/80 backdrop-blur-sm border border-gray-200/50 rounded-lg p-4 transition-all duration-500 hover:scale-102 hover:shadow-lg animate-in slide-in-from-bottom-4"
                    style={{ animationDelay: `${index * 100}ms` }}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <h3 className="font-light text-lg text-black mb-1 transition-colors duration-300 hover:text-gray-600">
                          {task.title}
                        </h3>
                        {task.subTasks.length > 0 && (
                          <div className="flex items-center gap-2 mb-2">
                            <div className="flex-1 h-1 bg-gray-200 rounded-full overflow-hidden">
                              <div
                                className="h-full bg-black transition-all duration-500 rounded-full"
                                style={{ width: `${getTaskProgress(task)}%` }}
                              />
                            </div>
                            <span className="text-xs text-gray-500">{getTaskProgress(task)}%</span>
                          </div>
                        )}
                        <div className="flex items-center gap-3 text-xs text-gray-500">
                          {task.time && <span>🕐 {task.time}</span>}
                          {task.duration && <span>⏱️ {task.duration}min</span>}
                        </div>
                      </div>
                      <div className="flex gap-2">
                        {!task.isActive && !task.completed && (
                          <Button
                            size="sm"
                            onClick={() => startFocusMode(task.id, task.title)}
                            className="bg-black text-white hover:bg-gray-800 rounded-full text-xs px-4 transition-all duration-300 hover:scale-105"
                          >
                            FOCUS
                          </Button>
                        )}
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => completeTask(task.id)}
                          className="text-xs text-gray-500 hover:text-black transition-all duration-300 hover:scale-110"
                        >
                          ✓
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Add Task Button */}
            {tasks.length > 0 && (
              <div className="text-center animate-in slide-in-from-bottom-4 duration-1000">
                <Button
                  onClick={() => setAppState("editing")}
                  className="bg-black text-white hover:bg-gray-800 rounded-none px-8 py-3 font-light tracking-wide transition-all duration-300 hover:scale-105"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  ADD ANOTHER INTENTION
                </Button>
              </div>
            )}
          </>
        )}

        {/* Editing Mode */}
        {appState === "editing" && (
          <div className="mt-8 animate-in slide-in-from-right duration-500">
            <div className="flex items-center justify-between mb-8">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setAppState(tasks.length > 0 ? "home" : "welcome")}
                className="p-2 transition-all duration-300 hover:scale-110"
              >
                <ArrowLeft className="w-4 h-4" />
              </Button>
              <h2 className="text-lg font-light tracking-wide">CREATE INTENTION</h2>
              <div className="w-8" />
            </div>

            <div className="bg-white border border-gray-200 p-8 animate-in slide-in-from-bottom-4 duration-500 delay-200">
              <div className="mb-6">
                <p className="text-sm text-gray-500 font-light mb-4">Describe what you'd like to accomplish</p>
              </div>

              <Input
                placeholder="What would you like to work on?"
                value={newTaskTitle}
                onChange={(e) => setNewTaskTitle(e.target.value)}
                className="mb-6 border-0 border-b border-gray-300 rounded-none bg-transparent text-lg py-4 px-0 focus:border-black placeholder:text-gray-400 transition-all duration-300"
                onKeyPress={(e) => e.key === "Enter" && addTask()}
              />

              <div className="grid grid-cols-2 gap-6 mb-6">
                <div className="animate-in slide-in-from-left duration-500 delay-400">
                  <label className="text-xs text-gray-500 mb-2 block tracking-wide">PREFERRED TIME</label>
                  <div className="relative">
                    <Input
                      type="text"
                      value={newTaskTime}
                      onClick={() => setShowTimePicker(true)}
                      readOnly
                      placeholder="Select time"
                      className="border-0 border-b border-gray-300 rounded-none bg-transparent cursor-pointer transition-all duration-300 focus:border-black"
                    />
                    <Clock className="absolute right-0 top-3 w-4 h-4 text-gray-400 transition-all duration-300 hover:text-black" />
                  </div>
                </div>

                <div className="animate-in slide-in-from-right duration-500 delay-400">
                  <label className="text-xs text-gray-500 mb-2 block tracking-wide">ESTIMATED DURATION</label>
                  <Input
                    type="number"
                    placeholder="Minutes"
                    value={newTaskDuration}
                    onChange={(e) => setNewTaskDuration(e.target.value)}
                    className="border-0 border-b border-gray-300 rounded-none bg-transparent transition-all duration-300 focus:border-black"
                  />
                </div>
              </div>

              <div className="flex gap-4 animate-in slide-in-from-bottom-4 duration-500 delay-600">
                <Button
                  onClick={addTask}
                  className="flex-1 bg-black text-white hover:bg-gray-800 rounded-none py-3 font-light tracking-wide transition-all duration-300 hover:scale-105"
                >
                  CREATE INTENTION
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setAppState(tasks.length > 0 ? "home" : "welcome")}
                  className="flex-1 border-gray-300 text-gray-600 hover:bg-gray-50 rounded-none py-3 font-light tracking-wide transition-all duration-300 hover:scale-105"
                >
                  MAYBE LATER
                </Button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Custom Time Picker */}
      {showTimePicker && (
        <TimePicker value={newTaskTime} onChange={setNewTaskTime} onClose={() => setShowTimePicker(false)} />
      )}
    </div>
  )
}
